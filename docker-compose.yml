version: '3.8'

services:
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "8090:8080"  # Changed from 8080 to 8090
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app_blue
      - app_green
    networks:
      - app-network

  app_blue:
    image: ${BLUE_IMAGE:-node:18-alpine}
    ports:
      - "8081:3000"
    environment:
      - PORT=3000
      - RELEASE_ID=${RELEASE_ID_BLUE:-blue-release-v1.0.0}
      - APP_POOL=blue
    command: >
      sh -c "
        apk add --no-cache curl &&
        node -e \"
          const http = require('http');
          const port = 3000;
          
          const server = http.createServer((req, res) => {
            console.log('Blue: ' + req.url);
            
            if (req.url === '/healthz') {
              res.writeHead(200, { 'Content-Type': 'text/plain' });
              res.end('OK');
              return;
            }
            
            if (req.url === '/version') {
              res.writeHead(200, { 
                'Content-Type': 'application/json',
                'X-App-Pool': 'blue',
                'X-Release-Id': process.env.RELEASE_ID || 'blue-default'
              });
              res.end(JSON.stringify({
                version: '1.0.0',
                timestamp: new Date().toISOString(),
                pool: 'blue',
                release: process.env.RELEASE_ID || 'blue-default',
                message: 'Blue service is running'
              }));
              return;
            }
            
            if (req.url === '/chaos/start') {
              res.writeHead(500, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ status: 'chaos started', mode: 'error' }));
              return;
            }
            
            if (req.url === '/chaos/stop') {
              res.writeHead(200, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ status: 'chaos stopped' }));
              return;
            }
            
            // Default response
            res.writeHead(200, { 
              'Content-Type': 'application/json',
              'X-App-Pool': 'blue',
              'X-Release-Id': process.env.RELEASE_ID || 'blue-default'
            });
            res.end(JSON.stringify({
              status: 'ok',
              service: 'blue',
              endpoints: ['/version', '/healthz', '/chaos/start', '/chaos/stop']
            }));
          });
          
          server.listen(port, () => {
            console.log('Blue service running on port ' + port);
          });
        \"
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - app-network

  app_green:
    image: ${GREEN_IMAGE:-node:18-alpine}
    ports:
      - "8082:3000"
    environment:
      - PORT=3000
      - RELEASE_ID=${RELEASE_ID_GREEN:-green-release-v1.0.0}
      - APP_POOL=green
    command: >
      sh -c "
        apk add --no-cache curl &&
        node -e \"
          const http = require('http');
          const port = 3000;
          
          const server = http.createServer((req, res) => {
            console.log('Green: ' + req.url);
            
            if (req.url === '/healthz') {
              res.writeHead(200, { 'Content-Type': 'text/plain' });
              res.end('OK');
              return;
            }
            
            if (req.url === '/version') {
              res.writeHead(200, { 
                'Content-Type': 'application/json',
                'X-App-Pool': 'green',
                'X-Release-Id': process.env.RELEASE_ID || 'green-default'
              });
              res.end(JSON.stringify({
                version: '1.0.0',
                timestamp: new Date().toISOString(),
                pool: 'green',
                release: process.env.RELEASE_ID || 'green-default',
                message: 'Green service is running'
              }));
              return;
            }
            
            if (req.url === '/chaos/start') {
              res.writeHead(500, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ status: 'chaos started', mode: 'error' }));
              return;
            }
            
            if (req.url === '/chaos/stop') {
              res.writeHead(200, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ status: 'chaos stopped' }));
              return;
            }
            
            // Default response
            res.writeHead(200, { 
              'Content-Type': 'application/json',
              'X-App-Pool': 'green',
              'X-Release-Id': process.env.RELEASE_ID || 'green-default'
            });
            res.end(JSON.stringify({
              status: 'ok',
              service: 'green',
              endpoints: ['/version', '/healthz', '/chaos/start', '/chaos/stop']
            }));
          });
          
          server.listen(port, () => {
            console.log('Green service running on port ' + port);
          });
        \"
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - app-network

networks:
  app-network:
    driver: bridge